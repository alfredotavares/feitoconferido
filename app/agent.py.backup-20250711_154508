from google.adk.agents import Agent
import json
import os

def load_reports():
    """Carrega relat√≥rios da pasta data"""
    reports = []
    base_path = os.path.join(os.path.dirname(__file__), '..', 'data')
    
    if not os.path.exists(base_path):
        return reports
    
    try:
        for file in os.listdir(base_path):
            if file.endswith('.json'):
                with open(os.path.join(base_path, file), 'r') as f:
                    report = json.load(f)
                    report['_source_file'] = file
                    reports.append(report)
    except Exception:
        pass
    
    return reports

def load_validation_criteria():
    """Carrega crit√©rios de valida√ß√£o de ader√™ncia arquitetural"""
    criterios_path = os.path.join(os.path.dirname(__file__), '..', 'criterios')
    
    if not os.path.exists(criterios_path):
        return "‚ùå Crit√©rios de valida√ß√£o n√£o encontrados"
    
    try:
        with open(os.path.join(criterios_path, 'validacao_aderencia_arquitetura.txt'), 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        return f"‚ùå Erro ao carregar crit√©rios: {e}"

def validar_aderencia_arquitetura(pergunta: str = "") -> str:
    """Valida ader√™ncia arquitetural baseado nos crit√©rios do Feito Conferido"""
    reports = load_reports()
    criterios = load_validation_criteria()
    
    if not reports:
        return "‚ùå Nenhum relat√≥rio de valida√ß√£o encontrado"
    
    if "‚ùå" in criterios:
        return criterios
    
    # Filtrar apenas relat√≥rios de valida√ß√£o
    validation_reports = [r for r in reports if r.get('validation_type') == 'Ader√™ncia Arquitetura']
    
    if not validation_reports:
        return "‚ùå Nenhum relat√≥rio de valida√ß√£o de ader√™ncia arquitetural encontrado"
    
    pergunta_lower = pergunta.lower()
    
    # An√°lise espec√≠fica por sistema
    if "pix" in pergunta_lower:
        return analisar_sistema_especifico(validation_reports, "PIX", criterios)
    elif "mobile" in pergunta_lower:
        return analisar_sistema_especifico(validation_reports, "Mobile", criterios)
    elif "etl" in pergunta_lower:
        return analisar_sistema_especifico(validation_reports, "ETL", criterios)
    else:
        return gerar_resumo_validacao(validation_reports, criterios)

def analisar_sistema_especifico(reports, sistema_tipo, criterios):
    """Analisa sistema espec√≠fico"""
    sistema_reports = [r for r in reports if sistema_tipo.upper() in r.get('system_name', '').upper()]
    
    if not sistema_reports:
        return f"‚ùå Nenhum relat√≥rio de valida√ß√£o encontrado para {sistema_tipo}"
    
    result = f"üîç VALIDA√á√ÉO ADER√äNCIA ARQUITETURA - {sistema_tipo.upper()}\n\n"
    
    for report in sistema_reports:
        result += f"üìä Sistema: {report.get('system_name', 'N/A')}\n"
        result += f"üìÖ Data: {report.get('validation_date', 'N/A')}\n"
        result += f"üë• Equipe: {report.get('team', 'N/A')}\n\n"
        
        # An√°lise dos crit√©rios
        validation_criteria = report.get('validation_criteria', {})
        
        result += "üìã RESULTADOS POR CRIT√âRIO:\n"
        for criterio, dados in validation_criteria.items():
            status = dados.get('compliance', 'N/A')
            question = dados.get('question', 'N/A')
            details = dados.get('details', 'N/A')
            
            if status == 'COMPLIANT':
                emoji = '‚úÖ'
            elif status == 'PARTIAL_COMPLIANT':
                emoji = '‚ö†Ô∏è'
            elif status == 'NON_COMPLIANT':
                emoji = '‚ùå'
            elif status == 'ATTENTION_REQUIRED':
                emoji = 'üîî'
            else:
                emoji = '‚ùì'
            
            result += f"\n{emoji} {criterio.upper().replace('_', ' ')}:\n"
            result += f"   Status: {dados.get('status', 'N/A')}\n"
            result += f"   Detalhes: {details}\n"
            
            # Issues espec√≠ficos
            if 'issues' in dados:
                result += f"   Issues: {', '.join(dados['issues'])}\n"
            if 'action_required' in dados:
                result += f"   ‚ö° A√ß√£o: {dados['action_required']}\n"
        
        # Assessment geral
        assessment = report.get('overall_assessment', {})
        result += f"\nüìä AVALIA√á√ÉO GERAL:\n"
        result += f"   Conformidade: {assessment.get('compliance_percentage', 0)}%\n"
        result += f"   Status: {assessment.get('status', 'N/A')}\n"
        result += f"   Conformes: {assessment.get('compliant', 0)}/{assessment.get('total_criteria', 0)}\n"
        
        # Issues cr√≠ticos
        critical_issues = assessment.get('critical_issues', [])
        if critical_issues:
            result += f"\nüö® ISSUES CR√çTICOS:\n"
            for issue in critical_issues:
                result += f"   ‚Ä¢ {issue}\n"
        
        # Pr√≥ximas a√ß√µes
        next_actions = assessment.get('next_actions', [])
        if next_actions:
            result += f"\nüéØ PR√ìXIMAS A√á√ïES:\n"
            for action in next_actions:
                result += f"   ‚Ä¢ {action}\n"
    
    return result

def gerar_resumo_validacao(reports, criterios):
    """Gera resumo geral de todas as valida√ß√µes"""
    result = "üìä RESUMO GERAL - VALIDA√á√ÉO ADER√äNCIA ARQUITETURA\n\n"
    
    total_systems = len(reports)
    result += f"üèóÔ∏è Sistemas validados: {total_systems}\n\n"
    
    # Estat√≠sticas gerais
    total_compliance = 0
    sistemas_criticos = []
    sistemas_bons = []
    
    for report in reports:
        system_name = report.get('system_name', 'Sistema')
        assessment = report.get('overall_assessment', {})
        compliance = assessment.get('compliance_percentage', 0)
        status = assessment.get('status', 'N/A')
        
        total_compliance += compliance
        
        if status in ['CRITICAL_ISSUES', 'NEEDS_IMPROVEMENT']:
            sistemas_criticos.append(f"{system_name}: {compliance}%")
        elif status in ['GOOD', 'EXCELLENT']:
            sistemas_bons.append(f"{system_name}: {compliance}%")
        
        result += f"üîç {system_name}:\n"
        result += f"   Conformidade: {compliance}%\n"
        result += f"   Status: {status}\n"
        
        # Issues cr√≠ticos resumidos
        critical_issues = assessment.get('critical_issues', [])
        if critical_issues:
            result += f"   üö® Issues: {len(critical_issues)} cr√≠ticos\n"
        
        result += "\n"
    
    # Estat√≠sticas finais
    avg_compliance = total_compliance / total_systems if total_systems > 0 else 0
    result += f"üìà ESTAT√çSTICAS GERAIS:\n"
    result += f"   Conformidade m√©dia: {avg_compliance:.1f}%\n"
    result += f"   Sistemas com issues cr√≠ticos: {len(sistemas_criticos)}\n"
    result += f"   Sistemas em bom estado: {len(sistemas_bons)}\n"
    
    if sistemas_criticos:
        result += f"\nüö® ATEN√á√ÉO NECESS√ÅRIA:\n"
        for sistema in sistemas_criticos:
            result += f"   ‚Ä¢ {sistema}\n"
    
    return result

root_agent = Agent(
    name="feito_conferido_validation_agent",
    model="gemini-2.0-flash", 
    description="Especialista em valida√ß√£o de ader√™ncia arquitetural - Feito Conferido Banco BV",
    instruction="""Voc√™ √© o especialista em VALIDA√á√ÉO DE ADER√äNCIA ARQUITETURA do Feito Conferido.

Use validar_aderencia_arquitetura para analisar:
- Implementa√ß√£o de componentes conforme desenho
- Comunica√ß√£o entre componentes (s√≠ncrono/ass√≠ncrono) 
- Ado√ß√£o de chassi de plataformiza√ß√£o
- Implementa√ß√£o de patterns (EDA, mensageria)
- Configura√ß√µes de escalabilidade
- Componentes sinalizados como SAIR no radar
- D√©bitos t√©cnicos e arquitetura de transi√ß√£o

Seja t√©cnico, objetivo e foque em conformidade vs n√£o-conformidade.""",
    tools=[validar_aderencia_arquitetura]
)
